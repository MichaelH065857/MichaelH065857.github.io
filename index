<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analizador Loter√≠as RD - API GitHub</title>
    <style>
        /* Todos los estilos anteriores se mantienen igual */
        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --accent: #e74c3c;
            --light: #ecf0f1;
            --dark: #2c3e50;
            --success: #2ecc71;
            --warning: #f39c12;
            --danger: #e74c3c;
            --bg-color: #f5f7fa;
            --card-bg: #ffffff;
            --text-color: #333333;
            --border-color: #dddddd;
        }

        .dark-mode {
            --bg-color: #1a1a1a;
            --card-bg: #2d2d2d;
            --text-color: #f0f0f0;
            --border-color: #444444;
            --light: #3a3a3a;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
            transition: all 0.3s ease;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 20px 0;
            border-radius: 10px;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .logo h1 {
            font-size: 1.8rem;
            font-weight: 700;
        }
        
        .logo-icon {
            font-size: 2rem;
        }
        
        .user-controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .theme-toggle {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }
        
        nav ul {
            display: flex;
            list-style: none;
            gap: 20px;
        }
        
        nav a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            padding: 8px 15px;
            border-radius: 5px;
            transition: background 0.3s;
        }
        
        nav a:hover, nav a.active {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 20px;
        }
        
        .sidebar {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            height: fit-content;
            position: sticky;
            top: 20px;
        }
        
        .content {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }
        
        .card {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            border-left: 4px solid var(--secondary);
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary);
        }
        
        .card-icon {
            font-size: 1.5rem;
            color: var(--secondary);
        }
        
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background: var(--secondary);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s;
        }
        
        .btn:hover {
            background: #2980b9;
            transform: translateY(-2px);
        }
        
        .btn-primary {
            background: var(--secondary);
        }
        
        .btn-success {
            background: var(--success);
        }
        
        .btn-warning {
            background: var(--warning);
        }
        
        .btn-danger {
            background: var(--danger);
        }
        
        .btn-sm {
            padding: 6px 12px;
            font-size: 0.9rem;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            font-size: 1rem;
            background: var(--card-bg);
            color: var(--text-color);
        }
        
        .number-grid {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            gap: 10px;
            margin: 15px 0;
        }
        
        .number {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 40px;
            background: var(--light);
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            border: 2px solid transparent;
        }
        
        .number:hover {
            transform: scale(1.05);
        }
        
        .hot {
            background: #ffebee;
            color: var(--danger);
            border-color: var(--danger);
        }
        
        .cold {
            background: #e3f2fd;
            color: var(--secondary);
            border-color: var(--secondary);
        }
        
        .neutral {
            background: var(--light);
            color: var(--text-color);
        }
        
        .selected {
            background: var(--success);
            color: white;
            border-color: var(--success);
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin: 20px 0;
        }
        
        .stat-card {
            background: var(--light);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        
        .stat-value {
            font-size: 1.8rem;
            font-weight: 700;
            margin: 10px 0;
        }
        
        .combination-result {
            background: var(--light);
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
            border-left: 4px solid var(--success);
        }
        
        .combination-numbers {
            display: flex;
            gap: 10px;
            margin: 15px 0;
            flex-wrap: wrap;
        }
        
        .combination-number {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
            background: var(--secondary);
            color: white;
            border-radius: 50%;
            font-weight: 700;
            font-size: 1.2rem;
        }
        
        footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: #7f8c8d;
            font-size: 0.9rem;
        }
        
        .tab-container {
            margin-top: 20px;
        }
        
        .tabs {
            display: flex;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border-bottom: 3px solid transparent;
        }
        
        .tab.active {
            border-bottom: 3px solid var(--secondary);
            color: var(--secondary);
            font-weight: 600;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .api-status {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            padding: 10px;
            border-radius: 5px;
            background: var(--light);
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #7f8c8d;
        }
        
        .status-indicator.connected {
            background: var(--success);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .results-table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }
        
        .results-table th, .results-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }
        
        .results-table th {
            background: var(--light);
            font-weight: 600;
        }
        
        .results-table tr:hover {
            background: rgba(0, 0, 0, 0.03);
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
        }
        
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--secondary);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 2s linear infinite;
            margin: 0 auto 20px;
        }
        
        .lottery-info {
            background: var(--light);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid var(--warning);
        }
        
        .number-source-selector {
            display: flex;
            gap: 15px;
            margin: 15px 0;
        }
        
        .source-option {
            flex: 1;
            text-align: center;
            padding: 15px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .source-option.selected {
            border-color: var(--secondary);
            background: rgba(52, 152, 219, 0.1);
        }
        
        .source-option:hover {
            transform: translateY(-2px);
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        @media (max-width: 1024px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .sidebar {
                position: static;
            }
        }
        
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 15px;
            }
            
            nav ul {
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .number-grid {
                grid-template-columns: repeat(5, 1fr);
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .number-source-selector {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <div class="logo-icon">üìä</div>
                    <h1>Analizador Loter√≠as RD - API GitHub</h1>
                </div>
                <div class="user-controls">
                    <button class="theme-toggle" id="theme-toggle">üåô</button>
                </div>
                <nav>
                    <ul>
                        <li><a href="#" class="active" data-tab="dashboard">Dashboard</a></li>
                        <li><a href="#" data-tab="results">Resultados API</a></li>
                        <li><a href="#" data-tab="forecast">Generar Pron√≥stico</a></li>
                        <li><a href="#" data-tab="analysis">An√°lisis</a></li>
                    </ul>
                </nav>
            </div>
        </div>
    </header>

    <div class="container">
        <div class="main-content">
            <div class="sidebar">
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">Estado API</h2>
                        <div class="card-icon">üîå</div>
                    </div>
                    <div class="api-status">
                        <div class="status-indicator" id="api-status"></div>
                        <div>
                            <strong id="api-status-text">Conectando...</strong>
                            <div style="font-size: 0.9rem;" id="last-update"></div>
                        </div>
                    </div>
                    <button class="btn btn-primary" id="refresh-data">üîÑ Actualizar Datos</button>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">Resumen R√°pido</h2>
                        <div class="card-icon">üìà</div>
                    </div>
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div>Resultados</div>
                            <div class="stat-value" id="total-results">0</div>
                            <div>Cargados</div>
                        </div>
                        <div class="stat-card">
                            <div>Loter√≠as</div>
                            <div class="stat-value" id="total-lotteries">0</div>
                            <div>Activas</div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">N√∫meros Top</h2>
                        <div class="card-icon">üî•</div>
                    </div>
                    <div class="form-group">
                        <label>M√°s Frecuentes:</label>
                        <div id="top-hot-numbers" class="number-grid">
                            <!-- Se cargar√°n din√°micamente -->
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Menos Frecuentes:</label>
                        <div id="top-cold-numbers" class="number-grid">
                            <!-- Se cargar√°n din√°micamente -->
                        </div>
                    </div>
                </div>
            </div>

            <div class="content">
                <!-- Dashboard Tab -->
                <div id="dashboard" class="tab-content active">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Dashboard Principal</h2>
                            <div class="card-icon">üè†</div>
                        </div>
                        <p>Conectado a la API de GitHub: <strong>LotteryScraping-RD</strong>. Los datos se actualizan autom√°ticamente desde el repositorio.</p>
                        
                        <div class="stats-grid">
                            <div class="stat-card">
                                <div>Datos Actualizados</div>
                                <div class="stat-value" id="data-updated">Hoy</div>
                                <div>√öltima sincronizaci√≥n</div>
                            </div>
                            <div class="stat-card">
                                <div>N√∫meros √önicos</div>
                                <div class="stat-value" id="unique-numbers">0</div>
                                <div>En an√°lisis</div>
                            </div>
                            <div class="stat-card">
                                <div>Frecuencia Promedio</div>
                                <div class="stat-value" id="avg-frequency">0</div>
                                <div>Apariciones</div>
                            </div>
                            <div class="stat-card">
                                <div>Margen Error</div>
                                <div class="stat-value" id="error-margin">92%</div>
                                <div>L√≠mite predictivo</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Distribuci√≥n de N√∫meros</h2>
                            <div class="card-icon">üìä</div>
                        </div>
                        <div class="number-grid" id="all-numbers-distribution">
                            <!-- Todos los n√∫meros con frecuencias -->
                        </div>
                    </div>
                </div>
                
                <!-- Results Tab -->
                <div id="results" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Resultados desde API GitHub</h2>
                            <div class="card-icon">üìã</div>
                        </div>
                        
                        <div class="form-group">
                            <label for="lottery-filter">Filtrar por loter√≠a:</label>
                            <select id="lottery-filter">
                                <option value="all">Todas las loter√≠as</option>
                            </select>
                        </div>
                        
                        <div id="api-results-container">
                            <div class="loading">
                                <div class="spinner"></div>
                                <p>Cargando datos desde GitHub...</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Forecast Tab -->
                <div id="forecast" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Generar Pron√≥stico</h2>
                            <div class="card-icon">üéØ</div>
                        </div>
                        
                        <div class="form-group">
                            <label for="forecast-lottery">Seleccionar Loter√≠a:</label>
                            <select id="forecast-lottery">
                                <option value="">-- Elegir Loter√≠a --</option>
                            </select>
                        </div>
                        
                        <div id="lottery-info-container">
                            <!-- Informaci√≥n de la loter√≠a seleccionada -->
                        </div>
                        
                        <div class="form-group">
                            <label>Fuente de n√∫meros:</label>
                            <div class="number-source-selector">
                                <div class="source-option selected" data-source="general">
                                    <strong>N√∫meros Generales</strong>
                                    <div style="font-size: 0.9rem; color: #666;">Todos los n√∫meros (0-99)</div>
                                </div>
                                <div class="source-option" data-source="lottery">
                                    <strong>Solo esta Loter√≠a</strong>
                                    <div style="font-size: 0.9rem; color: #666;">N√∫meros hist√≥ricos de esta loter√≠a</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="combo-amount">Combinaciones a generar:</label>
                            <input type="number" id="combo-amount" min="1" max="10" value="5">
                        </div>
                        
                        <button class="btn btn-primary" id="generate-forecast">Generar Pron√≥stico</button>
                        
                        <div id="forecast-results">
                            <!-- Resultados del pron√≥stico -->
                        </div>
                    </div>
                </div>
                
                <!-- Analysis Tab -->
                <div id="analysis" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">An√°lisis de Frecuencias</h2>
                            <div class="card-icon">üîç</div>
                        </div>
                        
                        <div class="form-group">
                            <label for="analysis-lottery">Loter√≠a para an√°lisis:</label>
                            <select id="analysis-lottery">
                                <option value="all">Todas las loter√≠as</option>
                            </select>
                        </div>
                        
                        <div id="frequency-analysis">
                            <div class="loading">
                                <div class="spinner"></div>
                                <p>Analizando datos...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer>
        <div class="container">
            <p>Analizador conectado a <strong>LotteryScraping-RD</strong> - Datos en tiempo real desde GitHub</p>
            <p>Esta herramienta es para fines educativos y de an√°lisis. Los juegos de azar deben disfrutarse con responsabilidad.</p>
        </div>
    </footer>

    <script>
        // Configuraci√≥n de loter√≠as con sus formatos espec√≠ficos
        const LOTTERY_CONFIG = {
            'Loter√≠a Nacional': { numbers: 3, digits: 2, format: 'Quiniela' },
            'Leidsa': { numbers: 3, digits: 2, format: 'Quiniela' },
            'Lotedom': { numbers: 3, digits: 2, format: 'Quiniela' },
            'Loteka': { numbers: 3, digits: 2, format: 'Quiniela' },
            'Real': { numbers: 3, digits: 2, format: 'Quiniela' },
            'La Suerte': { numbers: 3, digits: 2, format: 'Quiniela' },
            'Anguila': { numbers: 3, digits: 2, format: 'Quiniela' },
            'King Lottery': { numbers: 3, digits: 2, format: 'Quiniela' },
            'New York': { numbers: 3, digits: 2, format: 'Numbers' },
            'Florida': { numbers: 3, digits: 2, format: 'Cash 3' },
            'Mega Millions': { numbers: 5, digits: 2, format: 'Loto' },
            'Powerball': { numbers: 5, digits: 2, format: 'Loto' }
        };

        // Datos de la aplicaci√≥n
        const appData = {
            lotteryResults: [],
            numberFrequencies: {},
            lotterySpecificFrequencies: {},
            uniqueLotteries: new Set(),
            lastUpdate: null,
            settings: {
                theme: 'light',
                numberSource: 'general' // 'general' o 'lottery'
            }
        };

        // Inicializaci√≥n
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        async function initializeApp() {
            setupNavigation();
            setupEventListeners();
            await loadDataFromGitHub();
            updateUI();
        }

        function setupNavigation() {
            const tabLinks = document.querySelectorAll('nav a');
            tabLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const tabId = this.getAttribute('data-tab');
                    switchTab(tabId);
                });
            });
        }

        function setupEventListeners() {
            document.getElementById('theme-toggle').addEventListener('click', toggleTheme);
            document.getElementById('refresh-data').addEventListener('click', refreshData);
            document.getElementById('generate-forecast').addEventListener('click', generateForecast);
            document.getElementById('lottery-filter').addEventListener('change', filterResults);
            document.getElementById('analysis-lottery').addEventListener('change', updateAnalysis);
            
            // Selector de fuente de n√∫meros
            document.querySelectorAll('.source-option').forEach(option => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('.source-option').forEach(opt => opt.classList.remove('selected'));
                    this.classList.add('selected');
                    appData.settings.numberSource = this.getAttribute('data-source');
                });
            });
            
            // Actualizar info cuando cambia la loter√≠a seleccionada
            document.getElementById('forecast-lottery').addEventListener('change', updateLotteryInfo);
        }

        function switchTab(tabId) {
            document.querySelectorAll('nav a').forEach(link => link.classList.remove('active'));
            document.querySelector(`nav a[data-tab="${tabId}"]`).classList.add('active');
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            document.getElementById(tabId).classList.add('active');
        }

        function toggleTheme() {
            document.body.classList.toggle('dark-mode');
            const toggle = document.getElementById('theme-toggle');
            toggle.textContent = document.body.classList.contains('dark-mode') ? '‚òÄÔ∏è' : 'üåô';
        }

        async function loadDataFromGitHub() {
            try {
                updateAPIStatus('Conectando a GitHub...', 'connecting');
                await simulateDataLoad();
                updateAPIStatus('Conectado - Datos cargados', 'connected');
                updateLastUpdate();
            } catch (error) {
                console.error('Error cargando datos:', error);
                updateAPIStatus('Error de conexi√≥n', 'error');
            }
        }

        async function simulateDataLoad() {
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            // Datos de ejemplo para las 12 loter√≠as
            appData.lotteryResults = [
                { lottery: 'Loter√≠a Nacional', draw: 'D√≠a', numbers: [15, 25, 35], date: '2025-01-15', time: '12:00' },
                { lottery: 'Leidsa', draw: 'Noche', numbers: [5, 18, 42], date: '2025-01-15', time: '19:00' },
                { lottery: 'Lotedom', draw: 'Tarde', numbers: [8, 23, 67], date: '2025-01-15', time: '16:00' },
                { lottery: 'Loteka', draw: 'Ma√±ana', numbers: [12, 34, 56], date: '2025-01-15', time: '10:00' },
                { lottery: 'Real', draw: 'Medio D√≠a', numbers: [14, 28, 63], date: '2025-01-15', time: '14:00' },
                { lottery: 'La Suerte', draw: '12:30', numbers: [9, 21, 45], date: '2025-01-15', time: '12:30' },
                { lottery: 'Anguila', draw: 'Tarde', numbers: [7, 31, 72], date: '2025-01-15', time: '17:00' },
                { lottery: 'King Lottery', draw: '7:30', numbers: [22, 46, 78], date: '2025-01-15', time: '19:30' },
                { lottery: 'New York', draw: 'Tarde', numbers: [11, 39, 84], date: '2025-01-15', time: '14:30' },
                { lottery: 'Florida', draw: 'Noche', numbers: [3, 17, 89], date: '2025-01-15', time: '20:00' },
                { lottery: 'Mega Millions', draw: 'Noche', numbers: [18, 19, 38, 54, 57], date: '2025-01-15', time: '23:00' },
                { lottery: 'Powerball', draw: 'Noche', numbers: [3, 7, 47, 67, 68], date: '2025-01-15', time: '22:59' }
            ];
            
            processLotteryData();
        }

        function processLotteryData() {
            appData.numberFrequencies = {};
            appData.lotterySpecificFrequencies = {};
            appData.uniqueLotteries.clear();
            
            // Procesar frecuencias generales y por loter√≠a
            appData.lotteryResults.forEach(result => {
                appData.uniqueLotteries.add(result.lottery);
                
                // Inicializar frecuencias por loter√≠a si no existen
                if (!appData.lotterySpecificFrequencies[result.lottery]) {
                    appData.lotterySpecificFrequencies[result.lottery] = {};
                }
                
                // Contar frecuencias
                result.numbers.forEach(number => {
                    // Frecuencias generales
                    if (!appData.numberFrequencies[number]) {
                        appData.numberFrequencies[number] = 0;
                    }
                    appData.numberFrequencies[number]++;
                    
                    // Frecuencias por loter√≠a
                    if (!appData.lotterySpecificFrequencies[result.lottery][number]) {
                        appData.lotterySpecificFrequencies[result.lottery][number] = 0;
                    }
                    appData.lotterySpecificFrequencies[result.lottery][number]++;
                });
            });
            
            appData.lastUpdate = new Date();
        }

        function updateAPIStatus(message, status) {
            const indicator = document.getElementById('api-status');
            const text = document.getElementById('api-status-text');
            text.textContent = message;
            indicator.className = 'status-indicator';
            if (status === 'connected') indicator.classList.add('connected');
            else if (status === 'error') indicator.style.background = '#e74c3c';
            else if (status === 'connecting') indicator.style.background = '#f39c12';
        }

        function updateLastUpdate() {
            const element = document.getElementById('last-update');
            if (appData.lastUpdate) {
                element.textContent = `Actualizado: ${appData.lastUpdate.toLocaleTimeString()}`;
                document.getElementById('data-updated').textContent = 'Hoy';
            }
        }

        function updateUI() {
            document.getElementById('total-results').textContent = appData.lotteryResults.length;
            document.getElementById('total-lotteries').textContent = appData.uniqueLotteries.size;
            
            const uniqueNumbers = Object.keys(appData.numberFrequencies).length;
            document.getElementById('unique-numbers').textContent = uniqueNumbers;
            
            const totalAppearances = Object.values(appData.numberFrequencies).reduce((a, b) => a + b, 0);
            const avgFrequency = (totalAppearances / uniqueNumbers).toFixed(1);
            document.getElementById('avg-frequency').textContent = avgFrequency;
            
            updateLotterySelectors();
            updateTopNumbers();
            updateNumberDistribution();
            loadResultsTable();
            updateAnalysis();
        }

        function updateLotterySelectors() {
            const selectors = ['lottery-filter', 'forecast-lottery', 'analysis-lottery'];
            selectors.forEach(selectorId => {
                const selector = document.getElementById(selectorId);
                const currentValue = selector.value;
                selector.innerHTML = selectorId === 'lottery-filter' || selectorId === 'analysis-lottery' 
                    ? '<option value="all">Todas las loter√≠as</option>'
                    : '<option value="">-- Elegir Loter√≠a --</option>';
                
                appData.uniqueLotteries.forEach(lottery => {
                    const option = document.createElement('option');
                    option.value = lottery;
                    option.textContent = lottery;
                    selector.appendChild(option);
                });
                
                if (currentValue && selector.querySelector(`option[value="${currentValue}"]`)) {
                    selector.value = currentValue;
                }
            });
        }

        function updateLotteryInfo() {
            const lottery = document.getElementById('forecast-lottery').value;
            const container = document.getElementById('lottery-info-container');
            
            if (!lottery) {
                container.innerHTML = '';
                return;
            }
            
            const config = LOTTERY_CONFIG[lottery];
            const numbersCount = config ? config.numbers : 3;
            const format = config ? config.format : 'Quiniela';
            
            container.innerHTML = `
                <div class="lottery-info">
                    <strong>${lottery}</strong>
                    <div>Formato: ${format} - ${numbersCount} n√∫meros</div>
                    <div>Se generar√°n combinaciones de <strong>${numbersCount} n√∫meros</strong> autom√°ticamente</div>
                </div>
            `;
        }

        function updateTopNumbers() {
            const hotContainer = document.getElementById('top-hot-numbers');
            const coldContainer = document.getElementById('top-cold-numbers');
            hotContainer.innerHTML = '';
            coldContainer.innerHTML = '';
            
            const sortedNumbers = Object.entries(appData.numberFrequencies)
                .map(([num, freq]) => ({ number: parseInt(num), frequency: freq }))
                .sort((a, b) => b.frequency - a.frequency);
            
            sortedNumbers.slice(0, 6).forEach(item => {
                const numberEl = createNumberElement(item.number, 'hot');
                numberEl.title = `Apariciones: ${item.frequency}`;
                hotContainer.appendChild(numberEl);
            });
            
            const leastFrequent = sortedNumbers.filter(item => item.frequency > 0).slice(-6).reverse();
            leastFrequent.forEach(item => {
                const numberEl = createNumberElement(item.number, 'cold');
                numberEl.title = `Apariciones: ${item.frequency}`;
                coldContainer.appendChild(numberEl);
            });
        }

        function updateNumberDistribution() {
            const container = document.getElementById('all-numbers-distribution');
            container.innerHTML = '';
            for (let i = 0; i < 100; i++) {
                const frequency = appData.numberFrequencies[i] || 0;
                let temperature = 'neutral';
                if (frequency > 0) {
                    const allFrequencies = Object.values(appData.numberFrequencies).filter(f => f > 0);
                    const sortedFreq = [...allFrequencies].sort((a, b) => a - b);
                    const percentile = sortedFreq.indexOf(frequency) / sortedFreq.length;
                    if (percentile > 0.7) temperature = 'hot';
                    else if (percentile < 0.3) temperature = 'cold';
                }
                const numberEl = createNumberElement(i, temperature);
                if (frequency > 0) numberEl.title = `N√∫mero ${i}: ${frequency} apariciones`;
                container.appendChild(numberEl);
            }
        }

        function createNumberElement(number, temperature) {
            const element = document.createElement('div');
            element.className = `number ${temperature}`;
            element.textContent = number.toString().padStart(2, '0');
            return element;
        }

        function loadResultsTable() {
            const container = document.getElementById('api-results-container');
            const filter = document.getElementById('lottery-filter').value;
            let filteredResults = appData.lotteryResults;
            if (filter !== 'all') filteredResults = appData.lotteryResults.filter(result => result.lottery === filter);
            filteredResults.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            if (filteredResults.length === 0) {
                container.innerHTML = '<p>No hay resultados para los filtros seleccionados.</p>';
                return;
            }
            
            const table = document.createElement('table');
            table.className = 'results-table';
            table.innerHTML = `
                <thead>
                    <tr>
                        <th>Fecha</th>
                        <th>Loter√≠a</th>
                        <th>Sorteo</th>
                        <th>N√∫meros</th>
                        <th>Hora</th>
                    </tr>
                </thead>
                <tbody>
                    ${filteredResults.map(result => `
                        <tr>
                            <td>${formatDate(result.date)}</td>
                            <td>${result.lottery}</td>
                            <td>${result.draw}</td>
                            <td>${result.numbers.map(n => n.toString().padStart(2, '0')).join(' - ')}</td>
                            <td>${result.time}</td>
                        </tr>
                    `).join('')}
                </tbody>
            `;
            container.innerHTML = '';
            container.appendChild(table);
        }

        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('es-ES');
        }

        function filterResults() {
            loadResultsTable();
        }

        async function refreshData() {
            await loadDataFromGitHub();
            updateUI();
        }

        function generateForecast() {
            const lottery = document.getElementById('forecast-lottery').value;
            const comboAmount = parseInt(document.getElementById('combo-amount').value);
            const numberSource = appData.settings.numberSource;
            
            if (!lottery) {
                alert('Por favor selecciona una loter√≠a');
                return;
            }
            
            const container = document.getElementById('forecast-results');
            container.innerHTML = '';
            
            // Obtener configuraci√≥n de la loter√≠a
            const config = LOTTERY_CONFIG[lottery];
            const numbersCount = config ? config.numbers : 3;
            
            for (let i = 0; i < comboAmount; i++) {
                const combination = generateCombination(numbersCount, lottery, numberSource);
                const combinationElement = createCombinationElement(combination, i + 1, lottery);
                container.appendChild(combinationElement);
            }
        }

        function generateCombination(count, lottery, source) {
            let numbersPool;
            
            if (source === 'lottery') {
                // Usar solo n√∫meros de esta loter√≠a espec√≠fica
                const lotteryFrequencies = appData.lotterySpecificFrequencies[lottery] || {};
                numbersPool = Object.entries(lotteryFrequencies)
                    .map(([num, freq]) => ({ 
                        number: parseInt(num), 
                        weight: freq 
                    }));
                
                // Si no hay suficientes n√∫meros hist√≥ricos, completar con n√∫meros generales
                if (numbersPool.length < count) {
                    const generalPool = Object.entries(appData.numberFrequencies)
                        .map(([num, freq]) => ({ 
                            number: parseInt(num), 
                            weight: freq > 0 ? Math.pow(freq, 1.5) : 0.1 
                        }))
                        .filter(item => !numbersPool.some(lotteryItem => lotteryItem.number === item.number));
                    
                    numbersPool = numbersPool.concat(generalPool);
                }
            } else {
                // Usar n√∫meros generales
                numbersPool = Object.entries(appData.numberFrequencies)
                    .map(([num, freq]) => ({ 
                        number: parseInt(num), 
                        weight: freq > 0 ? Math.pow(freq, 1.5) : 0.1 
                    }));
            }
            
            let combination = [];
            let availableNumbers = [...numbersPool];
            
            while (combination.length < count && availableNumbers.length > 0) {
                const totalWeight = availableNumbers.reduce((sum, item) => sum + item.weight, 0);
                let random = Math.random() * totalWeight;
                
                for (let i = 0; i < availableNumbers.length; i++) {
                    random -= availableNumbers[i].weight;
                    if (random <= 0) {
                        combination.push(availableNumbers[i].number);
                        availableNumbers.splice(i, 1);
                        break;
                    }
                }
            }
            
            // Completar con n√∫meros aleatorios si es necesario
            while (combination.length < count) {
                const randomNum = Math.floor(Math.random() * 100);
                if (!combination.includes(randomNum)) {
                    combination.push(randomNum);
                }
            }
            
            return combination.sort((a, b) => a - b);
        }

        function createCombinationElement(combination, index, lottery) {
            const element = document.createElement('div');
            element.className = 'combination-result';
            
            const sourceText = appData.settings.numberSource === 'lottery' 
                ? `(Usando n√∫meros hist√≥ricos de ${lottery})` 
                : '(Usando todos los n√∫meros)';
            
            element.innerHTML = `
                <h3>Combinaci√≥n ${index} ${sourceText}</h3>
                <div class="combination-numbers">
                    ${combination.map(num => {
                        const freq = appData.numberFrequencies[num] || 0;
                        const temp = freq > 2 ? 'hot' : freq > 0 ? 'neutral' : 'cold';
                        return `<div class="combination-number ${temp}" title="${freq} apariciones">${num.toString().padStart(2, '0')}</div>`;
                    }).join('')}
                </div>
                <p><small>Generado: ${new Date().toLocaleTimeString()} - Loter√≠a: ${lottery}</small></p>
            `;
            return element;
        }

        function updateAnalysis() {
            const lottery = document.getElementById('analysis-lottery').value;
            const container = document.getElementById('frequency-analysis');
            
            let frequencies = { ...appData.numberFrequencies };
            if (lottery !== 'all') {
                frequencies = appData.lotterySpecificFrequencies[lottery] || {};
            }
            
            const analysisHTML = `
                <div class="stats-grid">
                    <div class="stat-card">
                        <div>Total N√∫meros</div>
                        <div class="stat-value">${Object.keys(frequencies).length}</div>
                        <div>Analizados</div>
                    </div>
                    <div class="stat-card">
                        <div>M√°s Frecuente</div>
                        <div class="stat-value">${getMostFrequentNumber(frequencies)}</div>
                        <div>N√∫mero</div>
                    </div>
                    <div class="stat-card">
                        <div>Max Apariciones</div>
                        <div class="stat-value">${Object.values(frequencies).length > 0 ? Math.max(...Object.values(frequencies)) : 0}</div>
                        <div>R√©cord</div>
                    </div>
                    <div class="stat-card">
                        <div>Sin Apariciones</div>
                        <div class="stat-value">${100 - Object.keys(frequencies).length}</div>
                        <div>N√∫meros</div>
                    </div>
                </div>
                
                <h3 style="margin-top: 20px;">Distribuci√≥n por Frecuencia</h3>
                <div class="number-grid" style="margin: 15px 0;">
                    ${Object.entries(frequencies)
                        .sort((a, b) => b[1] - a[1])
                        .slice(0, 20)
                        .map(([num, freq]) => {
                            const temp = freq > 2 ? 'hot' : 'neutral';
                            return `<div class="number ${temp}" title="${freq} apariciones">${num.padStart(2, '0')}</div>`;
                        }).join('')}
                </div>
            `;
            
            container.innerHTML = analysisHTML;
        }

        function getMostFrequentNumber(frequencies) {
            const entries = Object.entries(frequencies);
            if (entries.length === 0) return '-';
            const mostFrequent = entries.reduce((a, b) => a[1] > b[1] ? a : b);
            return mostFrequent[0].padStart(2, '0');
        }
    </script>
</body>
</html>
